package Local::TCP::Calc::Server;

use strict;
use Local::TCP::Calc;
use Local::TCP::Calc::Server::Queue;
use Local::TCP::Calc::Server::Worker;
use IO::Socket qw(getnameinfo SOCK_STREAM);
use Fcntl qw(:DEFAULT :flock);
use POSIX ":sys_wait_h";

my $max_worker;
my $in_process = 0;

my $pids_master = {};
my $receiver_count = 0;
my $max_forks_per_task = 0;
my $max_queue_task = 0;



$| = 1;

my @rec_pids = {};

sub REAPER {
    local $!;   # don't let waitpid() overwrite current error
    while ((my $pid = waitpid(-1, WNOHANG)) > 0 && WIFEXITED($?)) {
        print "rip $pid\n";
        @rec_pids = grep { $_ ne $pid } @rec_pids;
    }
    $SIG{CHLD} = \&REAPER;  # loathe SysV
}
$SIG{CHLD} = \&REAPER;

sub error {
    my $msg = shift;
    die $msg;
}

sub get_request {
    my $client = shift;
    my $packed_msg;
    my $packed_header;
    
    $client->recv($packed_header, HEADER_SIZE());

    print "Server rcv header: $packed_header";

    if ( length($packed_header) != HEADER_SIZE)  { error "broken header" }
    my %info = unpack_header($packed_header);
    
    print "Unpacked header: $info{type} $info{size}\n";

    $client->recv($packed_msg, BUF_SIZE());
    my $message = unpack_message($packed_msg);
    if ( length($message) != $info{size} ) { error "broken message" }
    my %request = (
        type => $info{type},
        size => $info{size},
        msg  => $message,
    );
    return %request;
}


sub start_server {
    my ($pkg, $port, %opts) = @_;
	$max_worker         = $opts{max_worker} // die "max_worker required"; 
	$max_forks_per_task = $opts{max_forks_per_task} // die "max_forks_per_task required";
	my $max_receiver    = $opts{max_receiver} // die "max_receiver required"; 

    my $host = "127.0.0.1";	
    my $server = IO::Socket::IP->new(
        LocalPort => $port,
        LocalAddr => $host,
        Proto     => 'tcp',
        Listen    => 5,
        Type      => SOCK_STREAM,
        V6Only    => 1,
        (($^O eq 'MSWin32') ? () : (ReuseAddr => 1)),
    ) or die "Cannot open server socket: $!";

    
    while (1) {        
        my $client = $server->accept;
        if ( !defined $client) {
            next;
        }
        if ( $#rec_pids == $max_receiver ) {
            print "Reached limit of receivers\n"; 
            print {$client} TYPE_CONN_ERR()."\n";
            close ( $client );
            next;
        }
        my $child = fork();
        #parent
        if ( $child ) { 
            push(@rec_pids, $child);
            close ($client); 
            next; 
        }
        #child
		if ( defined $child ) {
            close $server;
			my $other = getpeername($client);
			my ($err, $host, $service)=getnameinfo($other);
			
            
            $client->send(TYPE_CONN_OK()."\n");
                          
            my %request = get_request($client);
            print "Server got message: $request{msg}\n";

            my @ans = ('1'); 
            print {$client} "I think its 1\n";
            
             
            close $client;
            exit;
        } else { 
            die "Can't fork: $!"; 
        }
    }

} 

# Начинаем accept-тить подключения
# Проверяем, что количество принимающих форков не вышло за пределы допустимого ($max_receiver)
# Если все нормально отвечаем клиенту TYPE_CONN_OK() в противном случае TYPE_CONN_ERR()
# В каждом форке читаем сообщение от клиента, анализируем его тип (TYPE_START_WORK(), TYPE_CHECK_WORK()) 
# Не забываем проверять количество прочитанных/записанных байт из/в сеть
# Если необходимо добавляем задание в очередь (проверяем получилось или нет) 
# Если пришли с проверкой статуса, получаем статус из очереди и отдаём клиенту
# В случае если статус DONE или ERROR возвращаем на клиент содержимое файла с результатом выполнения
# После того, как результат передан на клиент зачищаем файл с результатом

sub check_queue_workers {
	my $self = shift;
	my $q = shift;
	...
	# Функция в которой стартует обработчик задания
	# Должна следить за тем, что бы кол-во обработчиков не превышало мексимально разрешённого ($max_worker)
	# Но и простаивать обработчики не должны
	# my $worker = Local::TCP::Calc::Server::Worker->new(...);
	# $worker->start(...);
	# $q->to_done ...
}

1;
